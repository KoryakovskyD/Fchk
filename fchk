#!/bin/bash

# –°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–æ–∏—Å–∫ "—à–∞–ø–æ–∫" —Ñ—É–Ω–∫—Ü–∏–π.
# –í –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è:
#  - –∫–∞—Ç–∞–ª–æ–≥, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –ø–æ–∏—Å–∫
#  - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å–∫–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è "—à–∞–ø–∫–∏"
#  - –∫–æ–¥–∏—Ä–æ–≤–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫
#  - –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –≤—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω,—Ç–æ –ø–∏—à–µ–º "screen", –∏–Ω–∞—á–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞.fchk"
# –°—Ü–µ–Ω–∞—Ä–∏–π –≤ –∫–∞–∂–¥–æ–º –∏–∑ —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏—â–µ—Ç "—à–∞–ø–∫–∏" —Ñ—É–Ω–∫—Ü–∏–π –∏
# –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–æ–≥—Ñ–∞–π–ª –∏–ª–∏ –Ω–∞ —ç–∫—Ä–∞–Ω.
# 
# Koryakovsky Dmitriy, NIS-315 , —Ç–µ–ª. 089


#–í–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
ver="1.13"


#–ò—Å–∫–æ–º—ã–µ —Å–ª–æ–≤–∞
# (–ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –º–µ–∂–¥—É —Å–æ–±–æ–π)
fieldsUTF="–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ","–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ","–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ","–ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
fieldsKOI="Ó¡⁄Œ¡ﬁ≈Œ…≈","˜»œƒŒŸ≈ ƒ¡ŒŒŸ≈","˜Ÿ»œƒŒŸ≈ ƒ¡ŒŒŸ≈","Îœƒ ⁄¡◊≈“€≈Œ…—"
fieldsWIN="Õ‡ÁÌ‡˜ÂÌËÂ","¬ıÓ‰Ì˚Â ‰‡ÌÌ˚Â","¬˚ıÓ‰Ì˚Â ‰‡ÌÌ˚Â"," Ó‰ Á‡‚Â¯ÂÌËˇ"

#–ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª—ã
fileexcl="user_task.h im.c itkm.c"

#–ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∏
direxcl="/target/ /MakeDisk serverOCPB/ /SYSINFO/"

#—Ñ–ª–∞–≥ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π —Å–æ —Å–ª–æ–≤–æ–º extern
fExcludeExtern=1

#–º–∞—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DftMask=".c .h"

#–ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫ "—à–∞–ø–∫–∏" —Ñ—É–Ω–∫—Ü–∏–∏
MAXFuncHeader=30

# –§–∞–π–ª –±–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
UtilsLib="/opt/mfp/UTILITIES/utils.lib"



#################################################################################




#–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –ø–æ—Å–ª–µ —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–æ–ª—è
min_point=3

#–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
tmp_file=/tmp/fchk_$$.tmp
tmp_func=/tmp/list_$$.tmp

#–§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π "—à–∞–ø–∫–∏"
first_dismatch=0

#–ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤–∞ "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Ñ–∞–π–ª–∞ (–≤ "—à–∞–ø–∫–µ" —Ñ–∞–π–ª–∞)
MAXStrDevHeader=30

#–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–æ—è—â–∏—Ö –∏–∑ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø—É—Å—Ç—ã—Ö
ListOfSkip=

ExludeExtern=1


fAbout=0
abtStr="Function CHecK(fchk) $ver | Checking function\`s header(s) in masked files."
abtColor="Blue"




###################### main cod ##############################################

# —É–¥–∞–ª–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ—Ä–≤—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä CTRL+C)
trap "rm -f $tmp_file; rm -f $tmp_func; exit" 1 2 5 15

tmp2=`echo "$2" | tr "[:lower:]" "[:upper:]"`
tmp3=`echo "$3" | tr "[:lower:]" "[:upper:]"`

#–û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω–µ–π—à–µ–µ —Å–ª–æ–≤–æ –∏–∑ –∏—Å–∫–æ–º—ã—Ö
savIFS=$IFS
max_char=0
IFS=,
for field in $fieldsUTF; do
    max_count=`echo $field | wc -c`
    if [ $max_count -gt $max_char ]; then
	max_char=$max_count
    fi
done
IFS=$savIFS


#–§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—á–∫–∞–º–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ–ª—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
#–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
#1 - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
spacer()
{
        tmp1=($1)
	char_of_word=${#tmp1[0]}
	point_count=`expr $max_char - $char_of_word + $min_point`
	LANG=C perl -e "print '.' x$point_count;"
}




#–£–∫–∞–∑–∞–Ω–∏–µ –≤–∑—è—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–Ω–µ–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
if [ -f "./$Utils_Lib" ]; then
    Utils_Lib="./$Utils_Lib"
fi

#–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –±–∏–±–ª–∏—Ç–µ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É—Ç–∏–ª–∏—Ç
if [ ! -f $Utils_Lib ]; then
    if [ -f "`dirname $0`/`basename $Utils_Lib`" ]; then
        Utils_Lib="`dirname $0`/`basename $Utils_Lib`"
    else
        echo "Error: –ù–µ—Ç —Ñ–∞–π–ª–∞ \"$Utils_Lib\"!"
        exit 1
    fi
fi


# –ø–æ–¥–∫–ª—é—á–∏–º –§–∞–π–ª –±–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É—Ç–∏–ª–∏—Ç
. $UtilsLib



if [ $# -le 1 ] || ( [ "$tmp2" != "UTF" ] && [ "$tmp2" != "KOI" ] && [ "$tmp2" != "WIN" ] && [ "$tmp3" != "UTF" ] && [ "$tmp3" != "KOI" ] && [ "$tmp3" != "WIN" ] ); then
    SuperEcho "USAGE: `basename $0` work_path \"fileexts\" {UTF|KOI} [screen]\n"
    SuperEcho "EX1: `basename $0` /home/PROJECTS \".c .h .asm\" UTF           -result in PROJECTS.fchk\n"
    SuperEcho "EX2: `basename $0` /home/PROJECTS \".c .h .asm\" KOI screen    -result on screen\n"
    SuperEcho "\nOUTPUT: V - is OK(word found), X - is ERROR(word not found)\n\n"
    exit
fi


#–æ–ø—Ä–µ–¥–µ–ª–∏–º –º–∞—Å–∫—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
if [ "`echo $2 | grep -Ew 'UTF|KOI|WIN'`" == "" ]; then 
    filemasks=$2
    Encoding=$3
else
    filemasks="$DftMask"
    Encoding=$2
fi

#–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
dir_of_projects=$1

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -d "$dir_of_projects" ]; then
   SuperEcho -fg Red "Directory \"$dir_of_projects\" not found!!!\n\n"
   exit
fi


#–ö–æ–¥–∏—Ä–æ–≤–∫–∞
case $Encoding in
     UTF)
         #–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –ª–µ–∂–∞—Ç –ø–æ–ª—è –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ
         fields=$fieldsUTF
         LANG="ru_RU.UTF-8"
         #–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞
         AltEncoding="KOI8-R"
         #–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ
         EncodingForRez="UTF-8"
         ;;
     KOI)
         fields=$fieldsKOI
         LANG="ru_RU.KOI8-R"
         AltEncoding="UTF-8"
         EncodingForRez="KOI8"
         ;;
     WIN)
         fields=$fieldsWIN
         LANG="ru_RU.cp1251"
         AltEncoding="UTF-8"
         EncodingForRez="KOI8"
         ;;
esac


#–ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω, —Ç–æ –ª–æ–≥—Ñ–∞–π–ª !!!, –∏–Ω–∞—á–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω–µ–≥–æ "—à–∞–ø–∫—É" –ø—Ä–æ–≥—Ä–∞–º–º—ã
if [ "`echo $@ | grep -i 'screen'`" != "" ]; then
  OFFLOG=1
  logfile=""
  SuperEcho  -log $logfile "Encoding={$LANG}, FileMask={$filemasks}, Date={`date`}\n\n"
else
  logfile=`basename "$1".fchk`
  rm -f $logfile
  SuperEcho "LOGfile: $logfile\n\n"
  OFFSCREEN=1
  SuperEcho -log $logfile "Function CHecK(fchk) $ver | Encoding={$LANG}, FileMask={$filemasks}, Date={`date`}\n\n"
fi

#–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –æ—à–∏–±–∫–∏ –≤ "—à–∞–ø–∫–∞—Ö" —Ñ—É–Ω–∫—Ü–∏–π
listOfDevelopers=""

#–°—á–µ—Ç—á–∏–∫ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
CountAllFiles=0

#–°—á–µ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
CountBadFiles=0
#######################################################################################

# –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
listOfFiles=""

# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
for type in $filemasks; do
    if [ "${endingType}" == "" ]; then
        endingType="*$type"
    else
        endingType+=" -or -name *$type"
    fi
done

listOfFiles="`find $dir_of_projects -type f -name $endingType 2>/dev/null | sort`"

# –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏—Å–∫–ª—é—á–Ω–∏—è
for excludeFile in $fileexcl; do 
    listOfFiles=`echo "$listOfFiles" | sed /$excludeFile/d`
done



# –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã, –≤ –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è
for excludeDirectory in $direxcl ; do 
    excludeDirectory=`echo "${excludeDirectory}" | sed 's/\//\\\\\//g'`
    listOfFiles=`echo "$listOfFiles" | sed "/${excludeDirectory}/d"`
done


listOfFiles=`echo "$listOfFiles" | sort -sdf`


# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
for currentFile in $listOfFiles; do


    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    ((CountAllFiles++))

    # –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if [ "$logfile" != "" ]; then
        echo -en "Processed file N: $CountAllFiles\r"
    fi

    # –°–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ—Å—Ç–æ–∏—Ç –Ω–µ –±–æ–ª–µ–µ —á–µ–º –∏–∑ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –≤ —Ç–µ–∫—É—â–µ–º —Ñ–∞–π–ª–µ
    max_str=`wc -l "${currentFile}" | awk {'print $1'}`
    if [ "$max_str" -lt 1 ]; then
        OFFSCREEN=0
        [ "$logfile" != "" ] && SuperEcho -fg Yellow "Skipped file(too short): \"${currentFile}\"\n"
        ListOfSkip=${ListOfSkip}${currentFile}"\n"
        OFFSCREEN=1
        continue
    fi

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if [ -f "${tmp_file}"  ]; then
        rm -f ${tmp_file}
    fi

    SuperEcho -log $tmp_file "\n\n-----------------------------------------------------------------------------------------------\n${currentFile}:\n"
    #–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–∏—Å–∫–∞ "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞" –≤ "—à–∞–ø–∫–µ" —Ñ–∞–π–ª–∞
    case $Encoding in
        UTF)
           DevInHeader=`grep -i '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫' "${currentFile}"`
           ;;
        KOI)
           DevInHeader=`grep -i '“¡⁄“¡¬œ‘ﬁ…À' "${currentFile}"`
           ;;
        WIN)
           DevInHeader=`grep -i '‡Á‡·ÓÚ˜ËÍ' "${currentFile}"`
           ;;
    esac

    if [ "$DevInHeader" = "" ]; then
       SuperEcho -log "$tmp_file" "Developer not found!\n\n"
    else
       SuperEcho -log $tmp_file "$DevInHeader\n\n"
    fi

    #—Ñ–ª–∞–≥ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ
    FGoodField=0

    #—Ñ–ª–∞–≥ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ –≤ "—à–∞–ø–∫–µ" —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    flag_of_dismatch=0

    ExcludeExtern=0

    #–Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–µ–∫—É—â–µ–º —Ñ–∞–π–ª–µ 
    CurrentLineNum=1

    #–Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –Ω–∞—á–∞–ª–æ–º "—à–∞–ø–∫–∏"
    HeaderBeginNum=1

    #–Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–Ω—Ü–æ–º "—à–∞–ø–∫–∏"
    HeaderEndNum=1

    #—Å—á–µ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–∞–π–ª–µ
    count_func=0

    #—Å—á–µ—Ç—á–∏–∫ –±–ª–æ—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    Comment=0

    #–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –ø–ª–æ—Ö–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    bad_count_func=0



    # –°—á–µ—Ç—á–∏–∫ –ø–ª–æ—Ö–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    counterBadlyFunction=0

    # –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±–ª–æ–∫–æ–≤
    counterOfOpenedBlocks=0

    # –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
    currentLineNumber=""

    # –ö–æ–ª–∏—á–µ—Å–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ
    quantityOfStringFromFile=`wc -l "${currentFile}" | awk '{print$1}'`

    # –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    listOfFunctionNumberLine=""

    # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —à–∞–ø–∫–∏
    theUpperLimit=1

    # –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—å—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    listOfFunctionNumberLine=""

    #–°—á–µ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    fOpenedCommentary=0

    quantityOfMatches=0



    # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    for ((currentLineNumber=1; currentLineNumber<quantityOfStringFromFile; currentLineNumber++)) ; do

        # –°—Ç—Ä–æ–∫–∞ —Ñ–∞–π–ª–∞
        fileLine=`sed -n ${currentLineNumber},${currentLineNumber}p ${currentFile}`


        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if [ "`echo "${fileLine}" | sed 's/[ \t]//g'`" == "" ]; then
            continue
        fi

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if [ "`echo "${fileLine}" | grep '^[ \t]*/\*'`" != "" ] ; then
            fOpenedCommentary=1
        fi

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if [ "`echo "${fileLine}" | grep '\*/'`" != "" ]; then
            fOpenedCommentary=0
        fi


        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
        quantityOfMatches=`echo "${fileLine}" | grep -o '{' | wc -l`
        if [ ${quantityOfMatches} -gt 0 ] ; then
        #    echo "+${fileLine}"
           [ "`echo "${fileLine}" | grep '^[ \t]*//'`" == "" -o "${fOpenedCommentary}" == 0  ] && ((counterOfOpenedBlocks+=quantityOfMatches))
        fi

        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
        quantityOfMatches=`echo "${fileLine}" | grep -o '}' | wc -l`
        if [ ${quantityOfMatches} -gt 0 ]; then
        #    echo "-${fileLine}"
            [ "`echo "${fileLine}" | grep '^[ \t]*//'`" == "" -o "${fOpenedCommentary}" == 0  ] &&((counterOfOpenedBlocks-=quantityOfMatches))
        fi

        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–æ–º–µ–Ω—á–µ–Ω–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –±–ª–æ–∫–µ –∫–æ–¥–∞, —è–≤–ª—è–µ—Ç—å—Å—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–º –∏–ª–∏ –Ω–∞ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∏–º–≤–æ–ª "\", —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        if [ "`echo "${fileLine}" | grep '^[ \t]*//'`" != ""  ] || [ "${fOpenedCommentary}" == 1 ] || [ ${counterOfOpenedBlocks} -gt 1 ] || [ "`echo "${fileLine}" | grep ')[ \t]*;'`" != "" ] || [ "`echo "${fileLine}" | grep '\\\\$'`" != "" ]; then
            continue
        fi

        # –ü–∞—Ç—Ç–µ—Ä–Ω –≤—ã–∑–æ–≤–∞ –∏–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–∞–∫–æ–π-–ª–∏–±–æ —Ñ—É–Ω–∫—Ü–∏–∏
        function="`echo "${fileLine}" | grep -o '^[ ]*[a-Z]*[ ]*[a-Z]*[ ]*[a-Z|\*]\+ \+[\*|0-Z|_]\+ *('`"

#        echo "${fileLine}||${function}"
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ç–æ–≥–æ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∞ –≥–¥–µ-—Ç–æ –≤ –¥—Ä—É–≥–æ–º —Ñ–∞–π–ª–µ
        if [ "`echo ${fileLine} | grep '^[ ]*extern '`" != "" ] && [ "$fExcludeExtern" == 1 ]; then
            # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ—á–∫–µ —Å–≤–æ–π—Å—Ç–≤–æ externable
            externable=1
        else
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–æ externable –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ—á–∫–∏
            externable=0
        fi

        # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—å—Å—è –û–ë–™–Ø–í–õ–ï–ù–ò–ï —Ñ—É–Ω–∫—Ü–∏
        #  # –ï—Å—Ç—å –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏       # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –º–µ–Ω—å—à–µ 1( –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –Ω–∞ —Å–ª—É—á–∞–π int func(){)    # –§—É–Ω–∫—Ü–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±–ª–∞–¥–∞—Ç–∞—Ç–µ–ª–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ externable

        if [ "${function}" != "" ] && [ ${counterOfOpenedBlocks} -eq 0  -o  ${counterOfOpenedBlocks} -eq 1 -a "`echo ${fileLine} | grep '{'`" != "" ]               && [ "${externable}" == 0  ]; then
             listOfFunctionNumberLine+=" ${currentLineNumber}"
        fi



    done  # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –∏ –≤—ã–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–ª—è –Ω–∞—Å —Å—Ç—Ä–æ–∫–∏

    # –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª –ø–æ–∏—Å–∫–∞ —à–∞–ø–∫–∏
    theUpperHeaderLimit=1

    # –¶–∏–∫–ª –ø–æ–∏—Å–∫–∞ —à–∞–ø–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
    for currentFunctionLineNumber in ${listOfFunctionNumberLine}; do

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É —à–∞–ø–∫–∏
        if [ ${currentFunctionLineNumber} -gt 30  ]; then
            ((theUpperHeaderLimit=currentFunctionLineNumber-30))
        else
              theUpperHeaderLimit=1
        fi

        # –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∞–ª–∞ —à–∞–ø–∫–∏
        beginHeaderLineNumber=""

        # –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∫–æ–Ω—Ü–∞ —à–∞–ø–∫–∏
        finalHeaderLineNumber=""

        # –§–ª–∞–≥, —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ –∫–æ–Ω–µ—Ü —à–∞–ø–∫–∏
        fHeaderFounded=0

        # –¢–∏–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è "//" - 1 –∏ "/*....*/" - 2
        commentType=0


        # –¶–∏–∫–ª –ø–æ–∏—Å–∫–∞ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —à–∞–ø–∫–∏
        for ((currentHeaderLineNumber=currentFunctionLineNumber-1; currentHeaderLineNumber >= theUpperHeaderLimit; currentHeaderLineNumber--)); do

            currentHeaderLine=`sed -n ${currentHeaderLineNumber},${currentHeaderLineNumber}p ${currentFile}`


            # –ò—â–µ–º –∫–æ–Ω–µ—Ü —à–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω
            if [ "${fHeaderFounded}" ==  0 ]; then

                # –°—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –ø–æ–¥–Ω–∏–º–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                if [ "`echo "${currentHeaderLine}" | sed 's/[ \t]//g'`" == "" ]; then
                    continue

                # –ù–∞—à–ª–∏ –∫–æ–Ω–µ—Ü —à–∞–ø–∫–∏ –≤–∏–¥–∞ // - –≤—ã—Å—Ç–∞–≤–ª–µ–º –Ω—É–∂–Ω—ã–µ –Ω–∞–º —Ñ–ª–∞–≥–∏
                elif [ "`echo "${currentHeaderLine}" | grep '[ \t]*//'`" != "" ]; then
                    finalHeaderLineNumber="${currentHeaderLineNumber}"
                    fHeaderFounded=1
                    commentType=1

                # –ù–∞—à–ª–∏ –∫–æ–Ω–µ—Ü —à–∞–ø–∫–∏ –≤–∏–¥–∞ */ - –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –Ω–∞–º —Ñ–ª–∞–≥–∏
                elif [ "`echo "${currentHeaderLine}" | grep '.*\*/'`" != "" ]; then
                    finalHeaderLineNumber=${currentHeaderLineNumber}
                    fHeaderFounded=1
                    commentType=2

                # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –∫–æ–Ω—Ü–∞ —à–∞–ø–∫–∏, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ
                else
                    break
                fi

# —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —à–∞–ø–∫–∏ –¥–æ 30 —Å—Ç—Ä–æ–∫
#                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–Ω–µ—Ü —à–∞–ø–∫–∏ —Ç–æ —Å–¥–≤–∏–≥–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ —à–∞–ø–∫–∏
#                if [ ${finalHeaderLineNumber} -gt 31  ]; then
#                     let theUpperHeaderLimit=${finalHeaderLineLimit}-30
#                else
#                     let theUpperHeaderLimit=1
#                fi

            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ —à–∞–ø–∫–∏
            else

                # –ï—Å–ª–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –º—ã –Ω–∞—à–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, —Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞ –Ω–∞—á–∞–ª–æ–º —à–∞–ø–∫–∏
                if [ "${commentType}" == 1  ] && [ "`echo "${currentHeaderLine}" | grep '^[ \t]*//'`" == "" ]; then
                    let beginHeaderLineNumber=${currentHeaderLineNumber}+1
                    break
                # –ï—Å–ª–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –º—ã –Ω–∞—à–ª–∏ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ /*, —Ç–æ —ç—Ç–æ –Ω–∞—á–∞–ª–æ —à–∞–ø–∫–∏
                elif [ ${commentType} == 2  ] &&  [ "`echo "${currentHeaderLine}" | grep '^[ \t]*/\*'`" != "" ]; then
                    let beginHeaderLineNumber=${currentHeaderLineNumber}
                    break
                # –ò—â–µ–º –Ω–∞—á–∞–ª–æ —à–∞–ø–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞
                else
                    [ ${theUpperHeaderLimit} -gt 1  ] && ((theUpperHeaderLimit--))
                fi

            fi
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ —à–∞–ø–∫–∏
#            echo "${currentFile}::${beginHeaderLineNumber},${finalHeaderLineNumber}::${commentType}"

        done     # –¶–∏–∫–ª –ø–æ–∏—Å–∫–∞ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —à–∞–ø–∫–∏

        if [ "${fHeaderFounded}" == 1 ] && [ "${beginHeaderLineNumber}" == ""  ]; then
            if [ ${finalHeaderLineNumber} -gt 31  ]; then
                let beginHeaderLineNumber=${finalHeaderLineNumber}-30
            else
                beginHeaderLineNumber=1
            fi
        fi


        # –§–ª–∞–≥ –¥–ª—è –æ–¥–Ω–æ–π —à–∞–ø–∫–∏
        bad_func_flag=0

        keeperIFS=${IFS}
        IFS=,

        # –¶–∏–∫–ª –ø–æ–∏—Å–∫–∞ –ø–æ–ª–µ–π –≤ —à–∞–ø–∫–µ, –∞ —Ç–∞–∫–∂–µ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
        for field in ${fields}; do
            echo -n "${field}" >> ${tmp_func}
            spacer ${field} >> ${tmp_func}

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–ª–µ –≤ —à–∞–ø–∫–µ
            if [ "${fHeaderFounded}" == "1" ] && [ "`sed -n ${beginHeaderLineNumber},${finalHeaderLineNumber}p ${currentFile} | grep -i "${field}"`" != "" ]; then
                FGoodField=1
                echo -e "${COLORrezGreen}V${COLORrezEnd}" >> ${tmp_func}
            else
                flag_of_dismatch=1
                bad_func_flag=1
                echo -e "${COLORrezRed}X${COLORrezEnd}" >> ${tmp_func}
            fi

        done # –¶–∏–∫–ª –ø–æ–∏—Å–∫–∞ –ø–æ–ª–µ–π –≤ —à–∞–ø–∫–µ, –∞ —Ç–∞–∫–∂–µ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª


        IFS=${keeperIFS}

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª —Å—Ç—Ä–æ–∫—É —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –∏ —Å –æ—à–∏–±–∫–æ–π –≤ —à–∞–ø–∫–µ
        echo -e "`sed -n ${currentFunctionLineNumber},${currentFunctionLineNumber}p ${currentFile}`\n" >> $tmp_func

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –≤ "—à–∞–ø–∫–∞—Ö" —Ñ—É–Ω–∫—Ü–∏–π
        if [ "${bad_func_flag}" == 1 ]; then

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–ª–æ—Ö–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            let bad_count_func=${bad_count_func}+1

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è —Ö—É–ª–∏–≥–∞–Ω–∞
            if [ "`echo -e "$ListOfDevelopers" | grep -F "$DevInHeader"`" == "" ]; then
              ListOfDevelopers=$ListOfDevelopers$DevInHeader"\n"
            fi
        fi

        # –°—á–µ—Ç—á–∏–∫ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–∞–π–ª–µ
        let count_func=${count_func}+1


        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ "—à–∞–ø–∫–∏" —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if [ "$bad_func_flag" == 1 ]; then
           cat "$tmp_func" >> "$tmp_file"
        fi

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
        if [ -f ${tmp_func} ]; then
            rm -f ${tmp_func}
        fi

    done    # –¶–∏–∫–ª –ø–æ–∏—Å–∫–∞ —à–∞–ø–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Ñ—É–Ω–∫—Ü–∏–π



    echo -e "FUNCTIONS WITH INCORRECT \"HEADER\": $bad_count_func of $count_func\n" >> $tmp_file
    if [ "${bad_count_func}" != 0 ]; then
       let CountBadFiles=$CountBadFiles+1
    fi

    #–µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—å –æ–¥–Ω—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é "—à–∞–ø–∫—É" —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–º —Ñ–∞–π–ª–µ, —Ç–æ –≤—ã–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –æ–±—â–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É(–Ω–∞ —ç–∫—Ä–∞–Ω –∏–ª–∏ –≤ —Ñ–∞–π–ª)
    if [ "${flag_of_dismatch}" == 1 ]; then

        # E—Å–ª–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è, —Ç–æ –∑–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —à–∞–ø–∫–∞–º —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if [ "${FGoodField}" == 0 ] && [ "${bad_func_flag}" == 1 ] && [ "`enca -L ru -r ${currentFile}`" == "$AltEncoding" ]; then
            echo -e "-----------------------------------------------------------------------------------------------" > $tmp_file
            echo -e "File ${currentFile} in wrong encoding (must be $EncodingForRez) !!!\n\n" >> $tmp_file
        fi

        #–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –Ω–µ–∫–æ—Ä—Ä–µ–∫–Ω—É—é "—à–∞–ø–∫—É" –≤–æ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö —Ñ–∞–π–ª–∞—Ö
        first_dismatch=1

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —á—Ç–æ —É–∑–Ω–∞–ª–∏ –ø—Ä–æ —Ñ–∞–π–ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
        if [ "$logfile" != "" ]; then
            cat $tmp_file >> $logfile
        else
            cat $tmp_file
        fi

    fi

done  # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã



#–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–º–µ–Ω–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
HeaderWithoutDev=`grep 'found' "$tmp_file"`

echo > $tmp_file

#–ü–∏—à–µ–º –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏ –∏ –≤—ã–≤–æ–¥–∏–º –∞–≤—Ç–æ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã "—à–∞–ø–∫–∏" —Ñ—É–Ω–∫—Ü–∏–π
if [ "${first_dismatch}" == 1 ]; then
   echo -e "\n\n\033[31;1mIncorrect function\`s header(s) found ($CountBadFiles from $CountAllFiles file(s)) !!!\033[0;0m\n\n"
   echo -e "#############################################################################################\n" >> $tmp_file
   if [ "$logfile" != "" ]; then
      echo -e "\nIncorrect function\`s header(s) found ($CountBadFiles from $CountAllFiles file(s)) !!!\n\n"  >> $tmp_file
   fi
else
   echo -e "\n\n\033[32;1mNo incorrect function\`s header found (from $CountAllFiles file(s)).\033[0;0m\n\n"
   echo -e "#############################################################################################\n" >> $tmp_file
   if [ "$logfile" != "" ]; then
      echo -e "\nNo incorrect function\`s header found (from $CountAllFiles file(s))." >> $tmp_file
   fi
fi

#–í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
if [ "$ListOfSkip" != "" ]; then
  echo -e "Skipped files:" >> $tmp_file
  echo -e "$ListOfSkip" | sort >> $tmp_file
fi

echo -e "\n\nDevelopers with incorrect function\`s header(s):" >> $tmp_file
echo -e "$ListOfDevelopers" | sort -u >> $tmp_file


#–ü–∏—à–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∞
if [ "$HeaderWithoutDev" != "" ]; then
   echo -e "Some files without the author !!!" >> $tmp_file
fi

echo -e "\n\n" >> $tmp_file

if [ "$logfile" == "" ]; then
   cat $tmp_file
else
   cat $tmp_file >> $logfile
fi


#–£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
rm -f $tmp_file
rm -f $tmp_func
